{
  "function": {
    "prefix": "fn",
    "body": "fn ${1:name} [${2:params}]\n \"${3:function-desc}\" \n ${4:body}",
    "description": "Create a function"
  },
  "anonymous-function": {
    "prefix": "fn-annon",
    "body": "fn [${1:params}]\n ${2:body}",
    "description": "Create anonymous function"
  },
  "lambda": {
    "prefix": "lambda",
    "body": "λ ${1:name} [${2:params}]\n \"${3:function-desc}\" \n ${4:body}",
    "description": "Create a lambda function"
  },
  "anonymous-lambda": {
    "prefix": "lambda-annon",
    "body": "λ [${1:params}]\n ${2:body}",
    "description": "Create anonymous lambda function"
  },
  "partial": {
    "prefix": "partial",
    "body": "partial (${1:fn}) ${2:args}",
    "description": "Create anonymous lambda function"
  },
  "require": {
    "prefix": "require",
    "body": "require :${1:module}",
    "description": "Create let scoped locals"
  },
  "import-macros": {
    "prefix": "import-macros",
    "body": "import-macros {: ${1:macro}} :${2:macro-file}",
    "description": "Create let scoped locals"
  },
  "macro": {
    "prefix": "macro",
    "body": "macro ${1:name} [${2:params}]\n ${3:body}",
    "description": "Create let scoped locals"
  },
  "macro-multiple": {
    "prefix": "macro-multiple",
    "body": "macro {:${1:name} (fn [${2:params}] ${3:body})}",
    "description": "Create let scoped locals"
  },
  "lua": {
    "prefix": "lua",
    "body": "lua \"${1:expr}\"",
    "description": "Create let scoped locals"
  },
  "let": {
    "prefix": "let",
    "body": "let [${1:var} ${2:value} $3]\n ${4:expr}",
    "description": "Create let scoped locals"
  },
  "local": {
    "prefix": "local",
    "body": "local ${1:name} ${2:val}",
    "description": "Create local variable"
  },
  "local-require": {
    "prefix": "local-require",
    "body": "local ${1:name} (require :${2:module})",
    "description": "Create local variable"
  },
  "var": {
    "prefix": "var",
    "body": "var ${1:name} ${2:val}",
    "description": "Create  variable"
  },
  "set": {
    "prefix": "set",
    "body": "set ${1:name} ${2:val}",
    "description": "set value to variable"
  },
  "table-set": {
    "prefix": "tset",
    "body": "tset ${1:table} :${2:field} ${3:value}",
    "description": "set value to field in table"
  },
  "do": {
    "prefix": "do",
    "body": "do\n ${1:body}",
    "description": "do block"
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:cond}\n ${2:body}\n :otherwise ${3:otherwise-body}",
    "description": "if conditions"
  },
  "when": {
    "prefix": "when",
    "body": "when ${1:cond}\n ${2:body}",
    "description": "when conditions"
  },
  "each": {
    "prefix": "each",
    "body": "each [${1:binding}]\n ${2:body}",
    "description": "iterate with each"
  },
  "for": {
    "prefix": "for",
    "body": "for [${1:var} ${2:from} ${3:to-inclusive}]\n ${4:body}",
    "description": "for loop"
  },
  "while": {
    "prefix": "while",
    "body": "while ${1:cond}\n ${2:body}",
    "description": "while loop"
  },
  "string-concat": {
    "prefix": "..",
    "body": ".. ${1:str1} ${2:str2}",
    "description": "string concat"
  },
  "string-length": {
    "prefix": "length",
    "body": "length ${1:strOrtable}",
    "description": "length of string or table"
  },
  "table-lookup": {
    "prefix": ".",
    "body": ". ${1:table} :${2:field}",
    "description": "table lookup"
  },
  "table-safe-lookup": {
    "prefix": "?.",
    "body": "?. ${1:table} :${2:field}",
    "description": "safe table lookup"
  },
  "method-call": {
    "prefix": ":",
    "body": ": ${1:class} :${2:method}",
    "description": "method call"
  },
  "multiple-values": {
    "prefix": "values",
    "body": "values ${1:val1} ${2:val2}",
    "description": "multiple values"
  },
  "threading-first": {
    "prefix": "->",
    "body": "-> ${1:val}\n ${2:fn1}\n ${3:fn2}",
    "description": "multiple values"
  },
  "threading-last": {
    "prefix": "->>",
    "body": "->> ${1:val}\n ${2:fn1}\n ${3:fn2}",
    "description": "multiple values"
  },
  "threading-safe-first": {
    "prefix": "-?>",
    "body": "-> ${1:val}\n ${2:fn1}\n ${3:fn2}",
    "description": "multiple values"
  },
  "threading-safe-last": {
    "prefix": "-?>>",
    "body": "->> ${1:val}\n ${2:fn1}\n ${3:fn2}",
    "description": "multiple values"
  },
  "doto": {
    "prefix": "doto",
    "body": "doto ${1:expr}\n ${2:body}",
    "description": "multiple values"
  },
  "print": {
    "prefix": "print",
    "body": "print ${1:expr}",
    "description": "Print something"
  },
  "print-debug": {
    "prefix": "print-debug",
    "body": "print \"${1:name}: \" ${1:name}",
    "description": "Print something"
  },
  "ab": {
    "prefix": "xxx",
    "body": [
      "class $1 ${2:extends ${3:Parent} }{"
    ],
    "description": "Create a function"
  },
  "match": {
    "prefix": "match",
    "body": "match ${1:expr}\n ${2:pattern} ${3:body}\n _ ${4:default-body}",
    "description": "Print something"
  },
  "match-guard": {
    "prefix": "match-guard",
    "body": "match ${1:expr}\n (where ${2:pattern} ${3:guard}) ${4:body}\n _ ${5:default-body}",
    "description": "Print something"
  }
}
